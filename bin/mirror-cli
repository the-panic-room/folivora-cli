#!/usr/bin/env node
const program = require('commander')
const lib = require('../src')
const server = require('../server')

const name = 'mirrror-cli'
const version = '1.0.0'

program.version(version, '-v, --version')
    .name(name)

program
    .command('check <repo> <path>')
    .description('Analiza el directoria actual como un repositorio')
    .action(lib.commands.check)

program
    .command('download <repo> <path>')
    .description('Descarga el repositorio remoto en la ruta seleccionada')
    .option('--mirror <mirror>', 'URL del servidor remoto del repositorio')
    .option('--arch <arch>', 'Define la arquitectura del repositorio')
    .option('--verbose', 'Mostrar todos los detalles de las descargas')
    .action(lib.commands.download)

program
    .command('runserver <host> <port>')
    .description('Inicia un servidor mirror proxy del repositorio linux definido')
    .option('--mirror <mirror>', 'URL del servidor remoto del repositorio')
    .option('--cache-path <path>', 'Directorio donde se almacena en cache')
    .option('--force-download', 'Fuerza a descargar la base de datos periodicamente')
    .option('--offline', 'Solo usa los paquetes almacenados en local')
    .option('--verbose', 'Mostrar todos los detalles de las descargas')
    .action(server)

program
    .command('copy <repo> <src> <dest>')
    .description('Realiza una copia del directorio actual')
    .action(lib.commands.copy)
// program
//     .command("fix <repo> <dir>")
// 	.option("--verbose", "Comprueba si existe actualizaciones entre paquetes")
// 	.description('repara dependencias rotas y sin signature')
//     .action(lib.fixFunc)

program.parse(process.argv)
